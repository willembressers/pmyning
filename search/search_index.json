{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PMYning This package aims to lower the barier for data scientist to get started with process mining. Installation Install via PyPI pip install pmyning Install via Poetry poetry add pmyning Install via Conda conda install -c conda-forge pmyning","title":"Home"},{"location":"#welcome-to-pmyning","text":"This package aims to lower the barier for data scientist to get started with process mining.","title":"Welcome to PMYning"},{"location":"#installation","text":"Install via PyPI pip install pmyning Install via Poetry poetry add pmyning Install via Conda conda install -c conda-forge pmyning","title":"Installation"},{"location":"about/","text":"https://mkdocstrings.github.io/recipes/","title":"About"},{"location":"development/","text":"Development Documentation Good code documentation will automatically lead to good documentation, so let's update the documentation. poetry run mkdocs serve Tests Run the unittests poetry run python -m unittest discover Publication First we need to bump the version number. poetry version 0.0.2 Now we can build the sdist & wheel. poetry build You will need an API token to publish the package to pypi. Create one here , and set it in the poetry config. poetry config pypi-token.pypi [your-api-token] Once the: - documentation is updated - all the unittests are succesfull - the version number is updated - package is build We can deploy the package. poetry publish","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#documentation","text":"Good code documentation will automatically lead to good documentation, so let's update the documentation. poetry run mkdocs serve","title":"Documentation"},{"location":"development/#tests","text":"Run the unittests poetry run python -m unittest discover","title":"Tests"},{"location":"development/#publication","text":"First we need to bump the version number. poetry version 0.0.2 Now we can build the sdist & wheel. poetry build You will need an API token to publish the package to pypi. Create one here , and set it in the poetry config. poetry config pypi-token.pypi [your-api-token] Once the: - documentation is updated - all the unittests are succesfull - the version number is updated - package is build We can deploy the package. poetry publish","title":"Publication"},{"location":"pmyning/io/xes/","text":"read_xes(file_path) Reads the given file path into pandas DataFrame. Examples: >>> import pmyning as pmy >>> df = pmy.read_xes(Path(\"assets/general_example.xes\")) Parameters filepath : Path The path to the given xes file. Returns pd.DataFrame description Raises Exception description Source code in pmyning/io/xes.py def read_xes(file_path: Path) -> pd.DataFrame: \"\"\"Reads the given file path into pandas DataFrame. Examples: >>> import pmyning as pmy >>> df = pmy.read_xes(Path(\"assets/general_example.xes\")) Parameters ---------- filepath : Path The path to the given xes file. Returns ------- pd.DataFrame _description_ Raises ------ Exception _description_ \"\"\" # check of the filepath exists if not file_path.exists(): raise Exception(\"File does not exist\") # read the file xlog = XUniversalParser().parse(file_path)[0] # collect the event data here events = [] # loop over the traces for xtrace in xlog: # loop over the events (in each trace) for event in xtrace: data = {} # add the trace data for key, value in xtrace.get_attributes().items(): data[f\"trace:{key}\"] = value.get_value() # add the event data for key, value in event.get_attributes().items(): data[f\"event:{key}\"] = value.get_value() # add the data to the list events.append(data) return pd.DataFrame(events)","title":"Xes"},{"location":"pmyning/io/xes/#pmyning.io.xes.read_xes","text":"Reads the given file path into pandas DataFrame. Examples: >>> import pmyning as pmy >>> df = pmy.read_xes(Path(\"assets/general_example.xes\"))","title":"read_xes"},{"location":"pmyning/io/xes/#pmyning.io.xes.read_xes--parameters","text":"filepath : Path The path to the given xes file.","title":"Parameters"},{"location":"pmyning/io/xes/#pmyning.io.xes.read_xes--returns","text":"pd.DataFrame description","title":"Returns"},{"location":"pmyning/io/xes/#pmyning.io.xes.read_xes--raises","text":"Exception description Source code in pmyning/io/xes.py def read_xes(file_path: Path) -> pd.DataFrame: \"\"\"Reads the given file path into pandas DataFrame. Examples: >>> import pmyning as pmy >>> df = pmy.read_xes(Path(\"assets/general_example.xes\")) Parameters ---------- filepath : Path The path to the given xes file. Returns ------- pd.DataFrame _description_ Raises ------ Exception _description_ \"\"\" # check of the filepath exists if not file_path.exists(): raise Exception(\"File does not exist\") # read the file xlog = XUniversalParser().parse(file_path)[0] # collect the event data here events = [] # loop over the traces for xtrace in xlog: # loop over the events (in each trace) for event in xtrace: data = {} # add the trace data for key, value in xtrace.get_attributes().items(): data[f\"trace:{key}\"] = value.get_value() # add the event data for key, value in event.get_attributes().items(): data[f\"event:{key}\"] = value.get_value() # add the data to the list events.append(data) return pd.DataFrame(events)","title":"Raises"}]}